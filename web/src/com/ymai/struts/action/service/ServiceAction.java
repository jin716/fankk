/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ymai.struts.action.service;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;

import com.ymai.hibernate.Admin;
import com.ymai.hibernate.HibernateSessionFactory;
import com.ymai.hibernate.Order;
import com.ymai.sms.SMSSendError;
import com.ymai.sms.SMSSender;
import com.ymai.sms.SMSSenderFactory;
import com.ymai.struts.Page;
import com.ymai.struts.action.ordersystem.OSFacade;

/** 
 * MyEclipse Struts
 * Creation date: 08-04-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ServiceAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String action = request.getParameter("action");
		if(action == null ){
			Admin admin = (Admin) request.getSession().getAttribute("c_admin");
			if(admin == null ) return mapping.findForward("oLogin");
			else return welcome(mapping, form, request, response);
		}
		Admin admin = (Admin) request.getSession().getAttribute("c_admin");
		if(admin == null ) return mapping.findForward("iLogin");

		//订单操作
		if(action.equals("latestOrder"))
			return latestOrder(mapping, form, request, response);
		if(action.equals("historyOrder"))
			return historyOrder(mapping, form, request, response);		
		if(action.equals("orderDetail"))
			return orderDetail(mapping, form, request, response);		
		if(action.equals("idOrder"))
			return idOrder(mapping, form, request, response);
		if(action.equals("orderProcess"))
			return orderProcess(mapping, form, request, response);
		return null;
	}
	
	private ActionForward welcome(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String url = request.getParameter("url");
		if(url == null) url = "latestOrder";
		request.setAttribute("url", url);
		return mapping.findForward("welcome");
	}
	
	private ActionForward latestOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Admin admin = (Admin) request.getSession().getAttribute("c_admin");
		if(!AdminPower.power(admin, AdminPower.ORDER))return mapping.findForward("iLogin");
		Integer pageNum = 1;
		Integer eachPage = 15;
		try{pageNum = Integer.valueOf(request.getParameter("page"));}catch(Exception e){}
		try{eachPage = Integer.valueOf(request.getParameter("eachPage"));}catch(Exception e){}
		Page page = ServiceFacade.getLatestOrder(pageNum, eachPage);
		request.setAttribute("page", page);
		return mapping.findForward("latestOrder");
	}
	
	private ActionForward historyOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Admin admin = (Admin) request.getSession().getAttribute("c_admin");
		if(!AdminPower.power(admin, AdminPower.ORDER))return mapping.findForward("iLogin");
		
		String start = request.getParameter("start");
		String end = request.getParameter("end");
		Integer pageNum = 1;
		Integer eachPage = 15;
		try{pageNum = Integer.valueOf(request.getParameter("page"));}catch(Exception e){}
		try{eachPage = Integer.valueOf(request.getParameter("eachPage"));}catch(Exception e){}
		Page page = ServiceFacade.getOrder(start, end, pageNum, eachPage);
		request.setAttribute("start", start);
		request.setAttribute("end", end);
		request.setAttribute("page", page);
		return mapping.findForward("historyOrder");
	}
	
	//显示无效订单编辑页面
	private ActionForward orderDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Admin admin = (Admin) request.getSession().getAttribute("c_admin");
		if(!AdminPower.power(admin, AdminPower.ORDER))return mapping.findForward("iLogin");
		Integer oid = Integer.valueOf(request.getParameter("order"));
		Order order = (Order) ServiceFacade.get(Order.class, oid);
		boolean can = OSFacade.processingOrder(oid, admin.getAdminId());
		try {
			OSFacade.orderAudit(oid, Order.STATE_AUDITING, null, admin.getAdminId());
		} catch (Exception e) {
			return mapping.findForward("errorAndBack");
		}
		if(!can){
			request.setAttribute("admin", OSFacade.orderProcesser(oid));
			return mapping.findForward("orderDetailBack");
		}
		request.setAttribute("order", order);
		return mapping.findForward("orderDetail");
	}
	
	private ActionForward orderProcess(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Admin admin = (Admin) request.getSession().getAttribute("c_admin");
		if(!AdminPower.power(admin, AdminPower.ORDER))return mapping.findForward("iLogin");
		Integer oid = Integer.valueOf(request.getParameter("order"));
		Integer state = Integer.valueOf(request.getParameter("state"));
		String detail = request.getParameter("detail");
		String send = request.getParameter("send");
		try {
			if(send!=null && send.equals("true") && state.equals(Order.STATE_NOT_PASS) ){
				try{
					Session sess = HibernateSessionFactory.getSessionFactory().getCurrentSession();
					Order order = (Order) sess.createSQLQuery("select * from order_tb where order_id = :order")
					.addEntity(Order.class).setInteger("order", oid).uniqueResult();
					SMSSender sender = SMSSenderFactory.getInstance();
					if(order.getStore().getStoreSendSMS()!=null&&order.getStore().getStoreSendSMS()==true)
						sender.sendOrder(order, order.getStore().getStoreMobile().toString());
				}catch(SMSSendError error){
					
				}
			}
			OSFacade.orderAudit(oid, state, detail, admin.getAdminId());
		} catch (Exception e) {
			return mapping.findForward("errorAndBack");
		}
		return mapping.findForward("toLatestOrder");
	}
	
	private ActionForward idOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Admin admin = (Admin) request.getSession().getAttribute("c_admin");
		if(!AdminPower.power(admin, AdminPower.ORDER))return mapping.findForward("iLogin");
		try{
			Integer oid = Integer.valueOf(request.getParameter("order"));
			Order order = (Order) ServiceFacade.get(Order.class, oid);
			request.setAttribute("order", order);
		}catch(Exception e){
			
		}
		return mapping.findForward("idOrder");
	}
	
}