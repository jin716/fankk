/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ymai.struts.action.ordersystem;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Hibernate;

import com.ymai.hibernate.Order;
import com.ymai.hibernate.Store;
import com.ymai.hibernate.User;
import com.ymai.policy.UserJifenPolicy;
import com.ymai.struts.action.ActionFacade;
import com.ymai.struts.action.order.OrderFacade;
import com.ymai.struts.action.order.OrderLife;
import com.ymai.struts.action.user.UserValidate;
import com.ymai.tools.Json;

/** 
 * MyEclipse Struts
 * Creation date: 07-03-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class GetOrderAction extends Action {
	/*
	 * Generated Methods
	 */
	private static SimpleDateFormat fomat = new SimpleDateFormat("MM-dd HH:mm");

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		String action = request.getParameter("action");
		response.setCharacterEncoding("utf-8");
		if(action == null){
			Integer num = (Integer) request.getSession().getAttribute("new_order_num");
			Date last = (Date) request.getSession().getAttribute("new_order_read");
			if(num!=null&&last!=null){
				Date now = new Date();
				if(now.getTime() - last.getTime() >= 60000){
					num = OSFacade.getNewOrderNum(request);
				}
			}
			else if(num == null){
				num = OSFacade.getNewOrderNum(request);
				request.getSession().setAttribute("new_order_num", num);
				request.getSession().setAttribute("new_order_read", new Date());
			}
			response.getWriter().write(num.toString());
			response.getWriter().close();
			return null;
		}
		if(action.equals("list")){
			return mapping.findForward("orderList");
		}
		if(action.equals("user")){
			Integer oid = (Integer) OrderLife.getCurrentOrderId(request);
			if(oid != null){
				Order order = (Order) request.getSession().getAttribute("user_order_now");
				Date last = (Date) request.getSession().getAttribute("user_order_read");
				if(order!=null&&last!=null){
					Date now = new Date();
					if(now.getTime() - last.getTime() >= 60000){
						order = (Order) ActionFacade.get(Order.class,oid);
						Hibernate.initialize(order.getOrderItemses());
						request.getSession().setAttribute("user_order_now",order);
						request.getSession().setAttribute("user_order_read",new Date());
					}
				}	
				else if(order==null){
					order = (Order) ActionFacade.get(Order.class,oid);
					Hibernate.initialize(order.getOrderItemses());
					request.getSession().setAttribute("user_order_now",order);
					request.getSession().setAttribute("user_order_read",new Date());
				}
				Date time = order.getOrderTime();
				response.getWriter().write("您在 "+fomat.format(time)+" 下了一份订单，状态："+order.getOrderStateString());
			}
			return null;
		}
		if(action.equals("page")){
			Integer oid = OrderLife.getCurrentOrderId(request);
			if(oid != null){
				Order order = (Order) ActionFacade.get(Order.class,oid);
				Hibernate.initialize(order.getOrderItemses());
				Date orderAudit = OSFacade.getOrderTraceTime(order.getOrderId(), Order.STATE_AUDITING);
				Date orderProcess = OSFacade.getOrderTraceTime(order.getOrderId(), Order.STATE_TELLED_STORE);
				request.setAttribute("orderAudit", orderAudit);
				request.setAttribute("orderProcess", orderProcess);
				request.getSession().setAttribute("user_order_now",order);
			}
			return mapping.findForward("currentOrder");
		}
		if(action.equals("frame")){
			Integer oid = (Integer) OrderLife.getCurrentOrderId(request);
			if(oid != null){
				Order order = (Order) ActionFacade.get(Order.class,oid);
				Date orderAudit = OSFacade.getOrderTraceTime(order.getOrderId(), Order.STATE_AUDITING);
				Date orderProcess = OSFacade.getOrderTraceTime(order.getOrderId(), Order.STATE_TELLED_STORE);
				request.setAttribute("orderAudit", orderAudit);
				request.setAttribute("orderProcess", orderProcess);
				if(order.getOrderState().equals(Order.STATE_NOT_PASS))request.setAttribute("orderFail", order.getOrderAudit());
				request.getSession().setAttribute("user_order_now",order);
			}
			return mapping.findForward("orderFrame");
		}
		if(action.equals("ok")){
			try {
				Integer oid = (Integer) OrderLife.getCurrentOrderId(request);
				OrderLife.orderOk(oid);
				UserValidate.reFreshUser(request);
				return mapping.findForward("orderOk");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;
	}
}