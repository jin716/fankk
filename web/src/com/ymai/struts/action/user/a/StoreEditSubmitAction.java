/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ymai.struts.action.user.a;

import java.math.BigInteger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.ymai.hibernate.Block;
import com.ymai.hibernate.HibernateSessionFactory;
import com.ymai.hibernate.Position;
import com.ymai.hibernate.Store;
import com.ymai.hibernate.User;
import com.ymai.struts.action.ActionFacade;
import com.ymai.struts.action.user.UserValidate;

/** 
 * MyEclipse Struts
 * Creation date: 07-09-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class StoreEditSubmitAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		User user = UserValidate.getUser(request);
		if(!user.getUserIsAdmin()){
			return mapping.findForward("login");
		}
		try{
			//StoreEditSbumitForm sf = (StoreEditSbumitForm) form;
			String sid = request.getParameter("storeId");
			Integer uid = Integer.valueOf(request.getParameter("userId"));
			Integer blockId = Integer.valueOf(request.getParameter("block"));
			Integer city = Integer.valueOf(request.getParameter("q_city"));
			if(sid==null||sid.trim().length()==0){
				Store store = toStore(mapping, form,request, response);
				UserAdminFacade.saveStore(store, uid, blockId, city);
				return mapping.findForward("ok");
			}
			else{
				Store store = toStore(mapping, form,request, response);
				//UserAdminFacade.updateStore(store, uid, blockId, city , sid);
				return mapping.findForward("ok");
			}		
		}catch(Exception e){
			e.printStackTrace();
			return mapping.findForward("again");
		}
	}
	
	private Store toStore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		Store store = new Store();
		try{
			Double latidute = Double.valueOf(request.getParameter("latidute"));
			Double longitude = Double.valueOf(request.getParameter("longitude"));
			String name = request.getParameter("storeName");
			String addr = request.getParameter("storeAddrName");
			BigInteger num = BigInteger.valueOf(Long.valueOf(request.getParameter("storeMobile")));
			Double storeSendCost = Double.valueOf(request.getParameter("storeSendCost"));
			Double storeLowCost = Double.valueOf(request.getParameter("storeLowCost"));
			Double storeSendDistance = Double.valueOf(request.getParameter("storeSendDistance"));
			Position pos = new Position();
			pos.setLatitude(latidute);
			pos.setLongitude(longitude);
			store.setStoreSendDistance(storeSendDistance);
			store.setStoreName(name);
			store.setStoreMobile(num);
			store.setStoreAddrName(addr);
			store.setStoreAddrY(pos.getLatitude());
			store.setStoreAddrX(pos.getLongitude());
			store.setStoreAccount(new Double(0));
			store.setStoreStars(new Double(4));
			store.setStoreHealth(new Double(4));
			store.setStoreSpeed(new Double(4));
			store.setStoreTaste(new Double(4));
			store.setStoreSendCost(storeSendCost);
			store.setStoreLowCost(storeLowCost);
			return store;
		}catch(Exception e){
			e.printStackTrace();
			throw e;
		}finally{
			request.setAttribute("store", store);
		}

	}
}