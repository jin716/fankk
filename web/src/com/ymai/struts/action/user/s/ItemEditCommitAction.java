/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ymai.struts.action.user.s;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Hibernate;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.ymai.hibernate.HibernateSessionFactory;
import com.ymai.hibernate.Item;
import com.ymai.hibernate.Store;
import com.ymai.hibernate.User;
import com.ymai.struts.FormUtil;
import com.ymai.struts.IllegalParameter;
import com.ymai.struts.action.order.OrderFacade;
import com.ymai.struts.action.user.UserValidate;

/** 
 * MyEclipse Struts
 * Creation date: 05-10-2010
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * 
 * 物品编辑/修改后，提交到此程序处理
 * 
 */
public class ItemEditCommitAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		User current = UserValidate.getUser(request);
		ItemEditForm eForm = (ItemEditForm) form;
		Integer itemId = eForm.getItemId();
		Session session = HibernateSessionFactory.getSession();
		Store store = (Store) session.load(Store.class, eForm.getStoreId());
		try {
			FormUtil.checkForm(form);
		} catch (IllegalParameter e) {
			request.setAttribute("mess", "不得输入非法字符,如:<>'等！");
			return mapping.findForward("error");
		}
		if(itemId != null){
			if(!UserValidate.canEditItem(request, itemId)){
				request.getSession().setAttribute("mess","权限不足,请先登录");
				return mapping.findForward("login");
			}
			else {
				
				Item item = (Item) session.load(Item.class, itemId);
				item.setItemPrice(eForm.getItemPrice());
				item.setItemDsct(1.0);
				item.setItemState(eForm.getItemState());
				item.setItemType(eForm.getItemType());
				Transaction tran = null;
				try{
					 tran = session.beginTransaction();
					 tran.begin();
					 session.update(item);
					 tran.commit();
					 session.close();
					 response.sendRedirect("welcome.do?action=itemEdit&item="+item.getItemId());
				}catch(Exception e){
					tran.rollback();
					e.printStackTrace();
					return mapping.findForward("error");
				}
				finally{
					if(session.isOpen())session.close();
				}
			}
		}
		else{
			Item item = new Item();
			item.setItemName(eForm.getItemName());
			item.setItemPrice(eForm.getItemPrice());
			item.setItemDsct(1.0);
			item.setItemState(eForm.getItemState());
			item.setItemType(eForm.getItemType());
			item.setStore(store);
			Transaction tran = null;
			try{
				 tran = session.beginTransaction();
				 tran.begin();
				 session.save(item);
				 tran.commit();
				 session.close();
				 response.sendRedirect("welcome.do?action=itemList");

			}catch(Exception e){
				tran.rollback();
				e.printStackTrace();
				return mapping.findForward("error");
			}
			finally{
				if(session.isOpen())session.close();
			}
		}
		
		return null;
	}
	
}